type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n    public static void main(String[] args) {\n        Scanner scanner = new\
    \ Scanner(System.in); \n        /*System.out.println(\"Starting to make a coffee\"\
    );\n        System.out.println(\"Grinding coffee beans\");\n        System.out.println(\"\
    Boiling water\");\n        System.out.println(\"Mixing boiled water with crushed\
    \ coffee beans\");\n        System.out.println(\"Pouring coffee into the cup\"\
    );\n        System.out.println(\"Pouring some milk into the cup\");\n        System.out.println(\"\
    Coffee is ready!\");*/\n        \n        int water = 400;\n        int milk =\
    \ 540;\n        int coffeeBeans = 120;\n        int disCups = 9;\n        int\
    \ money = 550;\n        final int ew = 250;\n        final int ecb = 16;\n   \
    \     final int ec = 4;\n        final int lw = 350;\n        final int lm = 75;\n\
    \        final int lcb = 20;\n        final int lc = 7;\n        final int cw\
    \ = 200;\n        final int cm = 100;\n        final int ccb = 12;\n        final\
    \ int cc = 6; \n        int uw;\n        int um;\n        int udc;\n        int\
    \ ucb;\n        String inp;\n        \n        do {\n            System.out.println(\"\
    Write action (buy, fill, take, remaining, exit):\");\n            inp = scanner.nextLine();\n\
    \            int x;\n            switch (inp) {\n                case \"remaining\"\
    :\n                    System.out.println(\"The coffee machine has:\");\n    \
    \                System.out.println(water + \" ml of water\");\n             \
    \       System.out.println(milk + \" ml of milk\");\n                    System.out.println(coffeeBeans\
    \ + \" g of coffee beans\");\n                    System.out.println(disCups +\
    \ \" disposable cups\");\n                    System.out.println(\"$\" + money\
    \ + \" of money\");\n                    System.out.println();\n             \
    \       break;\n                case \"buy\":\n                    System.out.println(\"\
    What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: \");\n     \
    \               x = scanner.nextInt();\n                    if (disCups == 1)\
    \ {\n                        System.out.println(\"Sorry, not enough disposable\
    \ cups!\");\n                    } else {\n                        switch (x)\
    \ {\n                            case 1: if (water > ew && coffeeBeans > ecb)\
    \ {\n                                    System.out.println(\"I have enough resources,\
    \ making you a coffee!\");\n                                    System.out.println();\n\
    \                                    water -= ew;\n                          \
    \          coffeeBeans -= ecb;\n                                    money += ec;\n\
    \                                } else {\n                                  \
    \  System.out.print(\"Sorry, not enough \");\n                               \
    \     if (water < ew) {\n                                    System.out.print(\"\
    water!\"); \n                                    }\n                         \
    \           if (coffeeBeans < ecb) {\n                                       \
    \ System.out.print(\"coffee beans!\");\n                                    }\n\
    \                                    System.out.println();\n                 \
    \               }\n                                break; \n                 \
    \           case 2:if (water > lw && milk > lm && coffeeBeans > lcb) {\n     \
    \                               System.out.println(\"I have enough resources,\
    \ making you a coffee!\");\n                                    System.out.println();\n\
    \                                    water -= lw;\n                          \
    \          milk -= lm;\n                                    coffeeBeans -= lcb;\n\
    \                                    money += lc;\n                          \
    \      } else {\n                                    System.out.print(\"Sorry,\
    \ not enough \");\n                                    if (water < lw) {\n   \
    \                                 System.out.print(\"water!\"); \n           \
    \                         }\n                                    if (milk < lm)\
    \ {\n                                        System.out.print(\"milk!\");\n  \
    \                                  }\n                                    if (coffeeBeans\
    \ < lcb) {\n                                        System.out.print(\"coffee\
    \ beans!\");\n                                    }\n                        \
    \            System.out.println();\n                                }\n      \
    \                          break;\n                            case 3:if (water\
    \ > cw && milk > cm && coffeeBeans > ccb) {\n                                \
    \    System.out.println(\"I have enough resources, making you a coffee!\");\n\
    \                                    System.out.println();\n                 \
    \                   water -= cw;\n                                    milk -=\
    \ cm;\n                                    coffeeBeans -= ccb;\n             \
    \                       money += cc;\n                                } else {\n\
    \                                    System.out.print(\"Sorry, not enough \");\n\
    \                                    if (water < cw) {\n                     \
    \               System.out.print(\"water!\"); \n                             \
    \       }\n                                    if (milk < cm) {\n            \
    \                            System.out.print(\"milk!\");\n                  \
    \                  }\n                                    if (coffeeBeans < ccb)\
    \ {\n                                        System.out.print(\"coffee beans!\"\
    );\n                                    }\n                                  \
    \  System.out.println();\n                                }\n                \
    \                break;\n                            default: System.out.println(\"\
    error\"); \n                                break;\n                        }\n\
    \                        --disCups;\n                    }\n                 \
    \   break;\n                case \"fill\":\n                    System.out.println(\"\
    Write how many ml of water you want to add: \");\n                    uw = scanner.nextInt();\n\
    \                    System.out.println(\"Write how many ml of milk you want to\
    \ add: \");\n                    um = scanner.nextInt();\n                   \
    \ System.out.println(\"Write how many grams of coffee beans you want to add: \"\
    );\n                    ucb = scanner.nextInt();\n                    System.out.println(\"\
    Write how many disposable cups of coffee you want to add: \");\n             \
    \       udc = scanner.nextInt();\n                    \n                    water\
    \ += uw;\n                    milk += um;\n                    coffeeBeans +=\
    \ ucb;\n                    disCups += udc;\n                    \n          \
    \          break;\n                case \"take\": System.out.println(\"I gave\
    \ you $\" + money);\n                    System.out.println();\n             \
    \       money = 0;\n                    break;\n                case \"exit\"\
    : break; \n                default: System.out.println(\"error\");\n         \
    \           break;\n            }\n        \n        } while (inp != \"exit\"\
    );\n        \n    }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5334#comment
status: Failed
feedback:
  message: "Wrong answer in test #1\n\nThis test is exactly like in the example -\
    \ try to run it by yourself\n\nPlease find below the output of your program during\
    \ this failed test.\nNote that the &#39;&gt;&#39; character indicates the beginning\
    \ of the input line.\n\n---\n\nWrite action (buy, fill, take, remaining, exit):\n\
    &gt; remaining\nThe coffee machine has:\n400 ml of water\n540 ml of milk\n120\
    \ g of coffee beans\n9 disposable cups\n$550 of money\n\nWrite action (buy, fill,\
    \ take, remaining, exit):\n&gt; buy\nWhat do you want to buy? 1 - espresso, 2\
    \ - latte, 3 - cappuccino: \n&gt; 2\nI have enough resources, making you a coffee!\n\
    \nWrite action (buy, fill, take, remaining, exit):\n&gt; buy\nWhat do you want\
    \ to buy? 1 - espresso, 2 - latte, 3 - cappuccino: \n&gt; 2\nSorry, not enough\
    \ water!\nWrite action (buy, fill, take, remaining, exit):\n&gt; fill\nWrite how\
    \ many ml of water you want to add: \n&gt; 1000\nWrite how many ml of milk you\
    \ want to add: \n&gt; 0\nWrite how many grams of coffee beans you want to add:\
    \ \n&gt; 0\nWrite how many disposable cups of coffee you want to add: \n&gt; 0\n\
    Write action (buy, fill, take, remaining, exit):\n&gt; buy\nWhat do you want to\
    \ buy? 1 - espresso, 2 - latte, 3 - cappuccino: \n&gt; 2\nI have enough resources,\
    \ making you a coffee!\n\nWrite action (buy, fill, take, remaining, exit):\n&gt;\
    \ take\nI gave you $564\n\nWrite action (buy, fill, take, remaining, exit):\n\
    &gt; remaining\nThe coffee machine has:\n700 ml of water\n390 ml of milk\n80 g\
    \ of coffee beans\n6 disposable cups\n$0 of money\n\nWrite action (buy, fill,\
    \ take, remaining, exit):\n&gt; exit"
  time: Fri, 20 May 2022 06:50:25 UTC
record: 6
