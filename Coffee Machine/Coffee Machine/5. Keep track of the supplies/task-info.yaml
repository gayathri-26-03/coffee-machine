type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n    public static void main(String[] args) {\n        Scanner scanner = new\
    \ Scanner(System.in); \n        /*System.out.println(\"Starting to make a coffee\"\
    );\n        System.out.println(\"Grinding coffee beans\");\n        System.out.println(\"\
    Boiling water\");\n        System.out.println(\"Mixing boiled water with crushed\
    \ coffee beans\");\n        System.out.println(\"Pouring coffee into the cup\"\
    );\n        System.out.println(\"Pouring some milk into the cup\");\n        System.out.println(\"\
    Coffee is ready!\");*/\n        \n        int water = 400;\n        int milk =\
    \ 540;\n        int coffeeBeans = 120;\n        int disCups = 9;\n        int\
    \ money = 550;\n        final int ew = 250;\n        final int ecb = 16;\n   \
    \     final int ec = 4;\n        final int lw = 350;\n        final int lm = 75;\n\
    \        final int lcb = 20;\n        final int lc = 7;\n        final int cw\
    \ = 200;\n        final int cm = 100;\n        final int ccb = 12;\n        final\
    \ int cc = 6; \n        int uw;\n        int um;\n        int udc;\n        int\
    \ ucb;\n        System.out.println(\"The coffee machine has:\");\n        System.out.println(water\
    \ + \" ml of water\");\n        System.out.println(milk + \" ml of milk\");\n\
    \        System.out.println(coffeeBeans + \" g of coffee beans\");\n        System.out.println(disCups\
    \ + \" disposable cups\");\n        System.out.println(\"$\" + money + \" of money\"\
    );\n        System.out.println();\n        System.out.println(\"Write action (buy,\
    \ fill, take): \");\n        String inp = scanner.nextLine();\n        int x;\n\
    \        switch (inp) {\n            case \"buy\":\n                System.out.println(\"\
    What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: \");\n     \
    \           x = scanner.nextInt();\n                switch (x) {\n           \
    \         case 1: if (water > ew && coffeeBeans > ecb) {\n                   \
    \             water -= ew;\n                                coffeeBeans -= ecb;\n\
    \                                money += ec;\n                            }\n\
    \                        break; \n                    case 2:if (water > lw &&\
    \ milk > lm && coffeeBeans > lcb) {\n                                water -=\
    \ lw;\n                                milk -= lm;\n                         \
    \       coffeeBeans -= lcb;\n                                money += lc;\n  \
    \                          }\n                        break;\n               \
    \     case 3:if (water > cw && milk > cm && coffeeBeans > ccb) {\n           \
    \                     water -= cw;\n                                milk -= cm;\n\
    \                                coffeeBeans -= ccb;\n                       \
    \         money += cc;\n                            }\n                      \
    \  break;\n                    default: System.out.println(\"error\"); \n    \
    \                    break;\n                }\n                --disCups;\n \
    \               System.out.println();\n                System.out.println(\"The\
    \ coffee machine has:\");\n                System.out.println(water + \" ml of\
    \ water\");\n                System.out.println(milk + \" ml of milk\");\n   \
    \             System.out.println(coffeeBeans + \" g of coffee beans\");\n    \
    \            System.out.println(disCups + \" disposable cups\");\n           \
    \     System.out.println(\"$\" + money + \" of money\");\n                break;\n\
    \            case \"fill\":\n                System.out.println(\"Write how many\
    \ ml of water you want to add: \");\n                uw = scanner.nextInt();\n\
    \                System.out.println(\"Write how many ml of milk you want to add:\
    \ \");\n                um = scanner.nextInt();\n                System.out.println(\"\
    Write how many grams of coffee beans you want to add: \");\n                ucb\
    \ = scanner.nextInt();\n                System.out.println(\"Write how many disposable\
    \ cups of coffee you want to add: \");\n                udc = scanner.nextInt();\n\
    \                \n                water += uw;\n                milk += um;\n\
    \                coffeeBeans += ucb;\n                disCups += udc;\n      \
    \          System.out.println();\n                System.out.println(\"The coffee\
    \ machine has:\");\n                System.out.println(water + \" ml of water\"\
    );\n                System.out.println(milk + \" ml of milk\");\n            \
    \    System.out.println(coffeeBeans + \" g of coffee beans\");\n             \
    \   System.out.println(disCups + \" disposable cups\");\n                System.out.println(\"\
    $\" + money + \" of money\");\n                \n                break;\n    \
    \        case \"take\": System.out.println(\"I gave you $\" + money);\n      \
    \          System.out.println();\n                money = 0;\n               \
    \ System.out.println(\"The coffee machine has:\");\n                System.out.println(water\
    \ + \" ml of water\");\n                System.out.println(milk + \" ml of milk\"\
    );\n                System.out.println(coffeeBeans + \" g of coffee beans\");\n\
    \                System.out.println(disCups + \" disposable cups\");\n       \
    \         System.out.println(\"$\" + money + \" of money\");\n               \
    \ break;\n            default: System.out.println(\"error\");\n              \
    \  break;\n        }\n        /*int w = water / 200;\n        int m = milk / 50;\n\
    \        int c = coffeeBeans / 15;\n        int min;\n        //calculate minimum\
    \ of these three\n        if (w < m && w < c) {\n            min = w;\n      \
    \  } else if (m < c) {\n            min = m;\n        } else {\n            min\
    \ = c;\n        }\n        \n        int cup = min - q; \n        \n        if\
    \ (min >= q) {\n            System.out.print(\"Yes, I can make that amount of\
    \ coffee\");    \n            \n            if (min > q && q > 0) {\n        \
    \        System.out.print(\"(and even \" + cup + \" more than that)\");\n    \
    \        }\n        } else {\n            System.out.print(\"No, I can make only\
    \ \" + min + \" cup(s) of coffee\");\n        }\n        \n        */\n      \
    \  \n    }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5333#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 20 May 2022 09:15:30 UTC
record: 5
